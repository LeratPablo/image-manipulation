/*******************************************************************
 L2 Informatique
 UE langage C avancé
 
 *******************************************************************/


// -------------------------------------------
// Definition des types
// -------------------------------------------

/// Le type tPixel pour représenter les niveaux de (rouge, vert, bleu)
typedef struct pixel {
    int r;
    int v;
    int b;
} tPixel;



// Le type tImCouleurP3 pour représenter une image en couleur PPM dans un tableau de pixels
typedef struct imagecouleur {
    int hauteur;        // Hauteur en pixels
    int largeur;        // Largeur en pixels
    int maxval;         // Valeur maximal des niveaux de rouge, vert, bleu d'un pixel
    tPixel** tabpix;       // Le tableau des pixels (tableau de structures de type tPixel)
} tImCouleurP3;



// Le type tImGrisP2 pour représenter une image PGM en mémoire
typedef struct imageGris {
    int hauteur;        // Hauteur en pixels
    int largeur;        // Largeur en pixels
    int maxval;         // Valeur maximal du niveau de gris des pixels
    int** tabgris;      // Tableau des niveaux de gris des pixels
} tImGrisP2;



// Le type tableau ascii art
typedef struct asciiart {
    int nblig;      // nombre de lignes
    int nbcol;      // nombre de colonnes
    char** tabcar;  // le tableau des caractères
} tASCIIArt;









// -------------------------------------------
// Squelette de la fonction permettant de charger une image couleur PPM dans une structure tImCouleurP3
// -------------------------------------------

tImCouleurP3 chargePPM(char* fichier){
    // ** Declaration des variables locales
    
    // ...
        
    // ** Ouverture du fichier texte en lecture
    // S'il y a erreur à l'ouverture, retourne une image vide avec le champ img égal à NULL
    
    // ...
    
    // ** Première ligne : type de l'image sur 2 caracteres de la forme Px
   
    // ...
        
    // ** On passe la fin de la 1ere ligne et on se positionne au début de la ligne suivante
    while((c = fgetc(flot)) != '\n');
    // On passe aussi toutes les lignes de commentaire commencant par #
    while ((c = fgetc(flot))=='#') {
        while((c = fgetc(flot)) != '\n');
    }
    ungetc(c, flot);		// Comme on a lu un caractère de trop on le remet dans le flot.
    
    
    // ** On récupère les dimensions de l'image, la valeur maximale de l'intensite des couleurs
    // et on initialise la structure que la fonction doit retourner
    
    // ...
    
    // ** Puis on lit tous les pixels qu'on place dans le tableau de la structure à retourner

    // ...
        
    // ** On ferme le fichier et on retourne la structure contenant l'image
    
    // ...
}




// -------------------------------------------
// Squelette de la fonction sauvePPM qui sauve dans le fihcier nom
// l'image contenue dans la structure tImCouleurP3 donnée
// On doit créer un fichier qui respecte rigoureusement le format ppm
// -------------------------------------------

void sauvePPM(char* nom, tImCouleurP3 im){
    // ** Declaration des variables locales
    
    //...
    
    // Ouverture du fichier en ecriture
    
    // ...
    
    // On ecrit d'abord le type de l'image P3
    
    // ...
    
    // On ecrit une ligne de commentaire pour indiquer le createur

    // ...
    
    // On ecrit les dimensions de l'image
    
    // ...
    
    // Puis la valeur maxi d'intensité des couleurs des pixels
    
    // ...
    
    // Ensuite on ecrit tous les pixels (une valeur par ligne) contenus dans le tableau

    // ..
    
    // et on ferme le fichier
    
    // ...
}





// -------------------------------------------
// Calcul de la luminance
// -------------------------------------------
/*
 La C.I.E (Commission Internationale de l'ƒclairage) propose, de caracteriser lÕinformation de luminance (la valeur de gris) dÕun pixel par deux formules :
 
 Dans sa recommandation 709, qui concerne les couleurs Ç vraies È ou naturelles :
 Gris = 0.2125 Rouge + 0.7154 Vert + 0.0721 Bleu
 */


float luminance(tPixel p){
    return(0.299*p.r + 0.587*p.v + 0.114*p.b);
}


